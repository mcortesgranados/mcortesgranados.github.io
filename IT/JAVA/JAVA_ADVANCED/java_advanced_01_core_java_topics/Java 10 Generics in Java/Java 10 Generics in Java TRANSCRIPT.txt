What are Generics in Java?
Generics in Java allow you to create classes, interfaces, and methods with type parameters. This enables stronger type checks at compile time and supports generic algorithms.

Why are Generics used in Java?
Generics are used to provide type safety and avoid casting when dealing with collections or other types. They allow for the specification of the type of elements contained in a collection, class, or method.

What is the difference between raw types and parameterized types in Generics?
Raw types refer to generic classes or interfaces that are used without specifying a type parameter, while parameterized types specify the exact type.

Can we use primitive types with Generics in Java?
No, generics in Java work only with reference types, not primitive types. However, you can use their wrapper classes such as `Integer`, `Double`, and `Boolean`.

What is a wildcard in Generics?
A wildcard (`?`) is used to represent an unknown type. It can be used in method arguments or fields to make the code more flexible and reusable.

What is the difference between `extends` and `super` wildcard in Generics?
The `extends` wildcard is used to define upper bounds (subtypes of a class), while the `super` wildcard defines lower bounds (supertypes of a class).
            
What is type erasure in Java Generics?
Type erasure is the process by which the Java compiler removes generic type information during compilation, converting it into raw types to ensure backward compatibility with older versions of Java.

Can we create generic arrays in Java?
No, due to type erasure, Java does not allow the direct creation of generic arrays. However, you can work around this limitation by creating an array of `Object` and casting it to the generic type.

What is the bounded type parameter in Generics?
A bounded type parameter restricts the type that can be used as a generic argument. You can use `extends` to limit the types to be subclasses of a specific class.

What is the advantage of using Generics in Java collections?
Using generics in Java collections allows for stronger type checking at compile time, which reduces the risk of `ClassCastException` and ensures type safety.
            
Can a generic type in Java extend multiple types?
No, a generic type in Java can extend only one class or interface. However, it can implement multiple interfaces.

What is the purpose of the `wildcard` `? extends T`?
The wildcard `? extends T` is used to specify that the generic type is a subtype of `T` (upper bounded wildcard). This allows for more flexibility in accepting different types of arguments while maintaining type safety.

What is a generic method in Java?
A generic method is a method that has its own type parameter, independent of the class's type parameters. It allows for type-safe operations on various types.

What is the difference between `List ` and `List `?
`List` specifies a list that can only hold `String` elements, whereas `List ` (a wildcard) can hold elements of any type, but you can't modify the list (except for adding `null`).

What is `List` used for?
`List` is a lower-bounded wildcard. It is used when you want to accept a list that can hold elements of type `T` or any supertype of `T`.

How can you create a generic class with multiple type parameters?
You can create a generic class with multiple type parameters by specifying multiple type parameters separated by commas.

What is the difference between `T[]` and `List `?
`T[]` is an array of type `T`, which has a fixed size and is not resizable. `List ` is a collection that can grow dynamically, allowing for more flexibility.

What does `Collections.emptyList()` return?
`Collections.emptyList()` returns an immutable empty list of the specified type.

Can Generics be used with constructors?
Yes, generics can be used with constructors in the same way as with methods or fields. The type parameter is specified when the object is created.

Can a method have multiple wildcard parameters in Java Generics?
Yes, a method can have multiple wildcard parameters, but they must be bounded properly. For example, you can specify different bounds for each parameter.

How do you restrict a generic type to a specific class or subclass in Java?
You can restrict a generic type by using the `extends` keyword, which defines an upper bound for the generic type.

What is a `TypeToken` in Java Generics?
A `TypeToken` is a way to capture and pass generic type information at runtime. It is often used when dealing with reflection or serialization frameworks like Gson.

How do you create a bounded wildcard with multiple bounds in Java?
In Java, you can create a bounded wildcard with multiple bounds using the `&` symbol. The first bound must be a class, and subsequent bounds must be interfaces.

What is the advantage of using `List` instead of `List `?
The `List` wildcard allows you to accept any subclass of `T`, providing greater flexibility when working with collections of different types that inherit from a common superclass.

Can we use Generics with static methods?
Yes, you can use Generics with static methods. However, the type parameters should be defined within the method itself since static methods do not have access to the instance's type parameters.

What is a `Generic Class`?
A `Generic Class` is a class that defines one or more type parameters, allowing it to work with different types while maintaining type safety.

Can Generics be used in `enum` types?
Yes, Generics can be used in `enum` types to define parameterized types for enum constants or methods in the enum class.

Can we create an instance of a generic type in Java?
Due to type erasure, you cannot directly create an instance of a generic type. However, you can create an instance of its raw type or use reflection for generic instantiation.

What is the purpose of the `super` keyword in a wildcard in Generics?
The `super` keyword in a wildcard (`? super T`) is used to specify the lower bound, meaning that the generic type can be `T` or any supertype of `T`.

Can we use Generics with constructors in Java?
Yes, Generics can be used in constructors, similar to their usage in methods and fields. The type parameter is defined when the object is created.

What is the difference between `T[]` and `List ` in Java Generics?
`T[]` is a fixed-size array, whereas `List ` is a resizable collection that can grow and shrink dynamically. The `List ` is generally preferred due to its flexibility.

Can a generic type be used as a method parameter in Java?
Yes, you can use a generic type as a method parameter. The type parameter is defined when the method is called.

What is the role of `type erasure` in Java Generics?
Type erasure is the process by which Java removes generic type information during compilation. It ensures backward compatibility with older versions of Java and allows generic types to be used with raw types.

What does `wildcard` `? extends T` allow you to do?
The wildcard `? extends T` represents an unknown type that is a subtype of `T`. It is commonly used to provide more flexibility when working with collections of a known base type.

What is the significance of `List` in Java?
`List` represents a list that can hold `T` or any supertype of `T`. This is useful when you want to write to a list but not necessarily read from it.

What is a `raw type` in Java Generics?
A raw type is a generic type without any type parameters. It is the non-generic form of a generic class or interface, and it is allowed for backward compatibility but should be avoided.

Can you declare a generic array in Java?
No, you cannot directly create an array of a generic type due to type erasure. However, you can work around this by using `Object[]` or `Array.newInstance()`.

What is the difference between `List` and `List`?
`List` allows you to read from the list, but you cannot add elements (except `null`). On the other hand, `List` allows you to add elements of type `T` but limits what you can read from the list.

What is a bounded type parameter in Java Generics?
A bounded type parameter restricts the types that can be used as arguments for a generic class, interface, or method. It can specify a superclass or interface.

What is the difference between `T[]` and `List ` when using Generics?
`T[]` is an array of a specific type, but arrays are fixed in size and cannot be resized. `List `, on the other hand, is a more flexible collection that can grow and shrink.

What is the purpose of `wildcards` in Java Generics?
Wildcards provide more flexibility when dealing with Generics by allowing you to define a range of types. There are upper-bounded (`? extends T`), lower-bounded (`? super T`), and unbounded (`?`) wildcards.

Can you use Generics with static methods?
Yes, static methods can also have generic type parameters, and the type parameter is scoped to the method itself.

What is the difference between `T[]` and `List ` in terms of Generics?
`T[]` is a basic array type in Java, while `List ` is part of the Java Collections Framework and provides dynamic resizing and a richer set of operations.

What are `generic methods` in Java?
Generic methods are methods that allow the definition of type parameters. These type parameters are specified when the method is called.

Can you use `var` with Generics in Java?
Yes, you can use `var` with Generics in Java, allowing for type inference while still retaining the benefits of Generics.

What is a `generic interface` in Java?
A generic interface is an interface that uses type parameters, allowing it to work with different types while maintaining type safety.

What is the effect of type erasure on generics in Java?
Type erasure removes the generic type information during runtime, replacing it with raw types. This ensures compatibility with older versions of Java that do not support Generics.

Can you create a class with multiple generic type parameters in Java?
Yes, you can create a class that takes multiple generic type parameters. This allows you to define relationships between multiple types in a single class.

What are the benefits of using Generics in Java?
The main benefits of using Generics in Java are type safety, reusability, and avoiding the need for casting. It helps catch errors at compile time instead of runtime.

What is the difference between a generic class and a generic method in Java?
A generic class has type parameters that apply to the entire class, while a generic method has type parameters that are specific to the method itself.

What is type inference in Java Generics?
Type inference allows the Java compiler to automatically determine the type of a generic class or method, reducing the need for explicit type declarations.

Can you use multiple wildcards in a single generic declaration?
No, Java does not support multiple wildcards in a single generic declaration. You can, however, use bounds like `extends` and `super` to restrict the types.

What is the difference between `List ` and `List` in Java?
`List ` is a wildcard type that can represent a list of any type, while `List ` is a list specifically of `Object` types. `List` is more flexible in generic methods.

Can you use `Generics` with enums in Java?
Yes, you can use `Generics` with enums in Java, allowing the creation of generic methods or classes that work with enum types.

How does the `Diamond` operator work in Java Generics?
The `Diamond` operator (`<>`) is used to let the compiler infer the type argument in generic classes and methods.

What is a raw type in Java Generics?
A raw type refers to a generic type without specifying the type parameter. Using raw types bypasses the benefits of type safety and should be avoided.

Can you use `Generics` with inner classes in Java?
Yes, you can use `Generics` with inner classes, but the outer class must be instantiated with the generic type parameters before the inner class can be instantiated.

What is a `type-safe` collection in Java?
A `type-safe` collection is a collection where the types of the elements are known and checked at compile time, preventing `ClassCastException` at runtime.

Can you define a generic array in Java?
No, you cannot directly create a generic array in Java due to type erasure. However, you can create an array of `Object` type and cast it.

What are `type bounds` in Java Generics?
Type bounds define the range of types that can be used as arguments for a generic type. It can be specified using the `extends` keyword for upper bounds or `super` for lower bounds.

Can a `generic` method have a `wildcard` type parameter?
Yes, a generic method can have a wildcard type parameter, and it is useful for allowing flexibility in the types the method can handle.

How does the `super` keyword work with wildcards in Java Generics?
The `super` keyword is used to specify a lower bound for wildcards. It allows the generic type to accept any type that is a superclass of the specified type.

What is the advantage of using `Generics` in Java?
The advantage of using `Generics` in Java is increased type safety and the ability to catch errors at compile time rather than runtime. It also allows for code reusability.

What is the difference between `Collection<E>` and `List<E>` in Java Generics?
`Collection<E>` is a root interface for all collection classes, while `List<E>` is a subtype that represents an ordered collection of elements.

Can you create a `Generic` class without using parameters?
Yes, you can create a class without using generic parameters, which makes it a non-generic class. However, this defeats the purpose of using generics.

What happens if you don't use generics in a class or method that uses collections in Java?
Without generics, you lose type safety, which can lead to runtime errors such as `ClassCastException`.

What is the use of the `extends` keyword in Java Generics?
The `extends` keyword in Java generics is used to specify an upper bound, restricting the types that can be used as type parameters.

What is a `generic constructor` in Java?
A `generic constructor` is a constructor that uses generic parameters. It allows you to create objects of different types within the same class.

What is the advantage of using `bounded` wildcards in Java Generics?
Bounded wildcards provide more flexibility and allow you to specify a range of types for a generic method or class, enhancing its reusability.

Can a `Generic` class extend a non-generic class in Java?
Yes, a generic class can extend a non-generic class, and you can use specific type parameters when extending.
            
What is the wildcard `?` used for in Java Generics?
The wildcard `?` represents an unknown type. It is used to allow a method to accept any type, with the possibility of restricting the type using `extends` or `super`.
	
What is the difference between `List<E>` and `List<? extends E>`?
`List<E>` is a list of exactly type `E`, while `List<? extends E>` is a list of any type that is a subtype of `E` (including `E` itself).

How do you create a `generic method` that works with multiple types?
You can define multiple type parameters for a generic method by separating them with commas.

Can `generics` be used with arrays in Java?
No, you cannot directly create generic arrays in Java due to type erasure. You can, however, create an array of a generic type by using reflection.

How does type erasure affect Java Generics?
Type erasure removes generic type information at runtime. This means that the generic type is replaced with the upper bound, typically `Object`, during compilation.

What is the use of `bounded` wildcards in method parameters?
Bounded wildcards are used to restrict the range of types that can be passed as arguments to a generic method, offering greater flexibility.

What is the difference between `List<E>` and `List<? super E>`?
`List<E>` is a list of type `E`, whereas `List<? super E>` is a list of any type that is a supertype of `E`, meaning you can add objects of type `E` and its subclasses.

Can `generics` be used with `enums` in Java?
Yes, you can use generics with enums, which allows for type-safe operations within collections of enums.

What is a `wildcard` type in Java Generics?
A wildcard type (`?`) is used to represent an unknown type. You can specify a lower or upper bound for this wildcard to control what types can be used.

What does `List<? super T>` represent in Java Generics?
`List<? super T>` represents a list that can hold any type that is a supertype of `T`, including `T` itself.

What is the purpose of `wildcard` with an upper bound (`? extends T`)?
The wildcard with an upper bound (`? extends T`) restricts the type to be `T` or any subtype of `T`. It allows for reading but not writing to the collection.

How do you constrain a type parameter to be a subtype of a specific class in Java Generics?
You can use the `extends` keyword to constrain a type parameter to be a subtype of a specific class.

What is the difference between `List<? extends T>` and `List<? super T>`?
`List<? extends T>` means the list can hold instances of `T` or any subclass of `T`, while `List<? super T>` means the list can hold `T` or any superclass of `T`.

What is the role of `` in Java Generics?
The `` wildcard allows you to write objects of type `T` (or its subtypes) into a collection. This is used to ensure type safety when writing elements.

Can you use `Generics` with `enum` types in Java?
Yes, generics can be used with enum types. You can use generics to define methods that work with enum types as well.

How do you create a generic class with multiple type parameters?
You can define a generic class with multiple type parameters by separating them with commas.

What is type erasure in Java Generics?
Type erasure is a process by which the compiler removes generic type information at runtime. After compilation, all the type parameters are replaced with their bounds (or `Object` if no bound is specified).

Why can't we create an array of a generic type in Java?
We cannot create an array of a generic type because of type erasure. The specific type information is lost at runtime, and the JVM cannot determine the component type of the array.

What is a generic method in Java?
A generic method is a method that can operate on objects of various types, defined by type parameters. It allows you to write flexible code that can work with different data types.