Records & Sealed Classes (Java 14+) - Q&A Set 1
What is a record in Java?
A record in Java is a special kind of class introduced in Java 14 as a preview feature and finalized in Java 16. It is a quick way of declaring classes that are intended to be used as data carriers, automatically providing a constructor, accessors, `equals()`, `hashCode()`, and `toString()` methods.

How do records differ from regular classes in Java?
Records are a special kind of class that automatically provides immutable fields, a constructor, `equals()`, `hashCode()`, and `toString()` methods. In contrast, regular classes require you to manually define these methods and handle immutability.

Can you extend a record in Java?
No, records cannot be extended by other classes. Records implicitly extend `java.lang.Record`, which is final, and thus they cannot be subclassed.

Can a record have instance methods?
Yes, records can have instance methods in addition to the automatically provided methods like `equals()`, `hashCode()`, and `toString()`. You can add additional behavior specific to your data structure.

What is a sealed class in Java?
A sealed class is a class that restricts which other classes or interfaces can extend or implement it. Introduced in Java 15, sealed classes allow you to control the inheritance hierarchy and define a set of allowed subclasses.

What is the benefit of using sealed classes in Java?
Sealed classes provide better control over the class hierarchy, making the code easier to maintain and understand. They allow you to restrict inheritance to a predefined set of subclasses, reducing the risk of unintended subclassing.

What are the key components of a record in Java?
The key components of a record in Java are the components (fields) defined in the parentheses, which are automatically declared as `final` and provided with getter methods.

Can you define constructors in records?
Yes, records can have constructors, but the primary constructor is automatically provided based on the parameters in the record declaration. You can define additional constructors if necessary.

How do sealed classes work with interfaces?
Sealed classes can implement interfaces, and you can specify which classes are allowed to implement them using the `permits` clause. The same inheritance restrictions apply to both classes and interfaces.
    
Can sealed classes be abstract in Java?
Yes, sealed classes can be abstract. The `abstract` keyword can be used with a sealed class, allowing you to define abstract methods that must be implemented by its permitted subclasses.

Can you use records with generics in Java?
Yes, you can use records with generics. Like regular classes, records can be parameterized with type parameters to create flexible data structures.

Can you extend a sealed interface in Java?
Yes, you can extend a sealed interface, just as you would with regular interfaces. However, you can only extend the sealed interface within the allowed set of permitted classes or interfaces.

What does the `permits` keyword do in a sealed class?
The `permits` keyword defines the set of classes or interfaces that are allowed to extend or implement a sealed class or interface. This creates a restricted and controlled class hierarchy.

Can a record implement an interface in Java?
Yes, a record can implement one or more interfaces, just like a regular class. Records can define additional behavior by implementing interfaces, providing more flexibility.

Can a record be used as a key in a HashMap?
Yes, records can be used as keys in a `HashMap` because they automatically generate the `hashCode()` and `equals()` methods, which are essential for hash-based collections.

What happens if you try to extend a sealed class from outside its permitted classes?
If you try to extend a sealed class from outside its permitted classes, it will result in a compilation error. Only the specified classes or interfaces in the `permits` clause are allowed to extend or implement the sealed class.

What does a `non-sealed` class do in a sealed class hierarchy?
A `non-sealed` class is a subclass of a sealed class that allows further subclassing outside the permitted set of subclasses. It is used when you want to allow additional subclasses beyond the restricted hierarchy.

Can you modify the fields of a record after it is created?
No, the fields of a record are implicitly `final`, meaning they cannot be modified after the record is created. Records are immutable by design.

What is the benefit of using records over regular classes in Java?
Records provide a compact syntax for data-carrying classes. They automatically generate constructors, `equals()`, `hashCode()`, and `toString()` methods, reducing boilerplate code and improving readability.

Can a record be used with `var` in Java?
Yes, records can be used with `var` for local variable declarations. The type of the variable is inferred based on the assigned value.

What is the main difference between a `sealed` class and an `abstract` class in Java?
A `sealed` class restricts which classes or interfaces can extend it by explicitly listing the permitted subclasses, while an `abstract` class can be extended by any other class, unless otherwise restricted.

Can sealed classes have constructors?
Yes, sealed classes can have constructors, and these constructors can be private or protected to prevent direct instantiation of the class.

Can you change the `permits` list of a sealed class after it is defined?
No, the `permits` list in a sealed class is fixed and cannot be modified after the class is compiled. Once the allowed subclasses are defined, they are set for the lifetime of the class.

Are records mutable or immutable in Java?
Records are immutable by design. Once a record is created, its fields cannot be changed, which is why the fields are implicitly declared as `final`.

What happens if a sealed class has no `permits` clause?
If a sealed class does not have a `permits` clause, it cannot be extended. It is effectively a final class, and no subclasses can be created for it.

Can you instantiate a record without specifying its fields in Java?
No, records are value-based and require the fields to be specified at instantiation, as they are part of the constructor.

How do records differ from data classes in other languages like Kotlin?
Records in Java are similar to data classes in Kotlin, as they are designed to hold immutable data. However, Java records automatically generate several methods such as `equals()`, `hashCode()`, and `toString()`, whereas in Kotlin, you must manually define these methods if needed.
            
Records & Sealed Classes (Java 14+) - Q&A Set 4
Can a sealed class implement interfaces?
Yes, a sealed class can implement interfaces just like any other class in Java. The subclasses of the sealed class can also implement interfaces.

What is the purpose of `non-sealed` classes in Java?
A `non-sealed` class is a subclass of a sealed class that is not restricted by the `permits` clause. It allows further extension of that class.

How do you declare a record with a custom method in Java?
You can add custom methods to a record, just like a normal class. The fields of the record can also be used in those methods.
            
Can you inherit from a sealed interface?
Yes, a sealed interface can be extended by other interfaces or implemented by classes, but like sealed classes, it restricts which interfaces and classes can implement or extend it.

Are records allowed to have static fields in Java?
Yes, records can have static fields, as they are regular classes in most respects, except for the automatically generated methods.

How does Java handle pattern matching with records?
Pattern matching in Java allows you to match a recordâ€™s components in a `switch` expression or `instanceof` check.

Can a record extend another record in Java?
No, records cannot extend other records. However, they can implement interfaces.

Can a sealed class be abstract?
Yes, a sealed class can be abstract. It can be used as a base class with restrictions on which classes can extend it.

How can you enforce immutability in a record's components?
All components of a record are implicitly `final`, meaning they cannot be reassigned. This ensures that records are immutable after they are created.

Can sealed classes have non-public constructors?
Yes, sealed classes can have private or protected constructors to control the creation of instances.

What are the advantages of using records in Java?
Records provide a compact syntax for declaring classes that are intended to only store immutable data. They automatically generate useful methods like `equals()`, `hashCode()`, `toString()`, and more.

Can you use a record as a supertype in inheritance?
No, records cannot be extended. They are implicitly `final` and do not support inheritance.

How does a record differ from a data class in Kotlin?
Both serve similar purposes, but in Java, records automatically generate methods like `equals()`, `hashCode()`, and `toString()` while enforcing immutability. Kotlin's `data` classes also provide similar features but are more flexible in some cases.

Can a sealed class be abstract and still have non-sealed subclasses?
Yes, a sealed class can be abstract and still allow non-sealed subclasses. The key restriction is that only the specified subclasses (as mentioned in the `permits` clause) can extend the sealed class unless it is marked `non-sealed`.

How can you change a record to a non-immutable class?
Records, by definition, are immutable. To make it mutable, you would have to replace it with a standard class and provide your own getters, setters, and other methods.

Can you instantiate a record without using its constructor?
No, you must use the constructor of the record to instantiate it. You cannot manually create a new instance without passing the required values to the constructor.

What happens if a sealed class does not have any subclasses?
If a sealed class does not have any subclasses, it remains a valid class but has no direct usage. You cannot extend it in any other classes.

Can you override methods in a record class?
Yes, you can override methods in a record class, including the automatically generated methods like `toString()`, `equals()`, and `hashCode()`, or any other method.

How do you define a sealed interface in Java?
A sealed interface is defined using the `sealed` keyword, just like a sealed class. You can specify which interfaces or classes are allowed to implement the sealed interface.

Can a record implement multiple interfaces?
Yes, a record can implement multiple interfaces, just like a regular class. 

Can a record class extend another class?
No, a record class cannot extend another class because it is implicitly `final`. However, it can implement interfaces.

What happens if a sealed class has a non-sealed subclass?
A non-sealed subclass allows further inheritance, meaning that classes can extend the non-sealed subclass freely. This is useful when you want to restrict inheritance within the sealed class hierarchy but still allow it for certain subclasses.

Can a sealed class have an abstract method?
Yes, a sealed class can have abstract methods, just like a normal abstract class. The subclasses must implement the abstract methods.

Can a record be used as a key in a HashMap?
Yes, a record can be used as a key in a HashMap because the `equals()` and `hashCode()` methods are automatically generated based on the record's fields.

Can you define a record with mutable fields?
No, records are inherently immutable. If you need mutable fields, you should use a regular class instead of a record.

How do you create a compact constructor for a record in Java?
You can define a compact constructor in a record to add additional validation or logic when initializing the fields.

What is the purpose of the `permits` keyword in sealed classes?
The `permits` keyword is used in sealed classes to specify the allowed subclasses that can extend the sealed class. It restricts subclassing to only the specified classes or interfaces.

Can a sealed class implement interfaces?
Yes, a sealed class can implement one or more interfaces, just like a regular class. The restriction only applies to the inheritance hierarchy.

What is a practical use case for sealed classes?
Sealed classes are useful when you want to define a closed set of related types, such as when modeling domain-specific logic where the set of possible subclasses is finite and known at compile time.
Example: Modeling different types of shapes in a drawing application.

Can a record class implement multiple interfaces?
Yes, a record class can implement multiple interfaces. This allows you to add behavior to records via interfaces.

Are sealed classes automatically abstract in Java?
Yes, sealed classes are implicitly abstract unless they are declared as `final` or they have no methods.

What is the primary purpose of records in Java?
The primary purpose of records is to provide a compact, immutable data structure for modeling simple data objects. Records automatically generate methods like `toString()`, `equals()`, and `hashCode()` based on the fields.

Can a sealed class be extended outside of its permitted subclass list?
No, a sealed class can only be extended by the classes listed in its `permits` clause. If a class is not in the `permits` list, it cannot extend the sealed class.

Can you mix regular classes and records in the same inheritance hierarchy?
No, a record cannot extend a regular class or vice versa. Records can only extend other records if required, and they cannot extend a class.

Can a record be declared abstract?
No, records are implicitly final and cannot be declared abstract. You can't inherit from a record, and you don't need to declare them abstract.
		
How does inheritance work in a sealed class hierarchy?
In a sealed class hierarchy, inheritance is restricted to the classes listed in the `permits` clause of the sealed class. This allows for more controlled and predictable subclassing.

Can sealed interfaces exist in Java?
Yes, sealed interfaces are allowed in Java. Like sealed classes, they can limit which classes or interfaces can implement or extend them.

Can you use a sealed class with a `final` modifier?
Yes, a sealed class can be `final`, meaning it cannot be extended. When a class is both `final` and sealed, it effectively becomes a fully closed class hierarchy.
            
Records & Sealed Classes (Java 14+) - Q&A Set 8
Can you define a record with additional methods?
Yes, records can have additional methods, just like regular classes. These methods are typically used for added behavior that is not part of the state representation.

Can you create a sealed class hierarchy with both final and non-final subclasses?
Yes, you can have both final and non-final subclasses in a sealed class hierarchy. The `final` subclass will prevent further inheritance, while the non-final subclass can be extended by other classes.

Can a sealed class be used with a pattern matching feature in Java?
Yes, sealed classes are especially useful with pattern matching in Java. You can match on the specific subclasses of a sealed class using `instanceof` or other pattern matching features introduced in newer versions of Java.

How do you override methods in a record class?
You can override methods in a record class just like in a normal class. The automatically generated methods like `toString()`, `equals()`, and `hashCode()` can also be overridden.

Can you serialize a record object?
Yes, record objects can be serialized, as long as they implement `Serializable` (which they do by default if the record's fields are `Serializable`).

Can a record have a constructor with parameters?
Yes, records can have a constructor, but it is automatically generated based on the fields. You can define a custom constructor if needed, to add additional validation or logic.

What happens if you try to extend a record?
You cannot extend a record in Java, because records are implicitly `final`. You can implement interfaces, but inheritance is not allowed.

Can you define a sealed class with no permitted subclasses?
Yes, you can define a sealed class without any permitted subclasses, which makes the class fully sealed. This can be useful when you want to restrict further subclassing at all.

Are sealed classes and records compatible?
Yes, you can use sealed classes and records together. A sealed class can have a record as one of its permitted subclasses, and a record can implement interfaces that may be used in a sealed class hierarchy.

Can a sealed class extend another sealed class?
Yes, a sealed class can extend another sealed class. However, the subclasses of the extending sealed class must also be declared within the `permits` clause.

Can a record be abstract?
No, a record cannot be abstract because it is inherently intended to represent immutable data structures. Records are implicitly final, so they cannot be extended.

Can you have a static field in a record?
Yes, you can have static fields in a record. However, static fields are not part of the record's state and do not affect the automatically generated methods such as `toString()`, `equals()`, and `hashCode()`.

Can a sealed class be abstract?
Yes, a sealed class can be abstract. It can have abstract methods that subclasses must implement.

Can you use `instanceof` to check for types in a sealed class hierarchy?
Yes, you can use `instanceof` to check for types in a sealed class hierarchy, which can be very useful in pattern matching.

Can a record implement interfaces?
Yes, records can implement interfaces just like regular classes. However, they cannot extend other classes as they are implicitly `final`.

How can you ensure a record is immutable?
Records are immutable by default because all their fields are implicitly `final` and they provide a constructor to initialize them. However, if you want to ensure the immutability of complex objects, you should also ensure that the fields are deeply immutable.

Can you inherit from a sealed class and make your class non-sealed?
Yes, you can inherit from a sealed class and make your subclass `non-sealed`. This allows further subclassing beyond that subclass.

Are records always thread-safe?
Records are inherently thread-safe only if all fields within the record are immutable. Since records provide final fields, they are thread-safe as long as they do not hold references to mutable objects.
            
Can you define a constructor in a record?
Yes, you can define a constructor in a record, but the compiler will automatically provide a constructor that takes parameters for all the fields. You can define a custom constructor to add validation or transformation logic.

Can sealed classes be used with pattern matching?
Yes, sealed classes work well with pattern matching in Java, allowing more concise and readable code for type checks. In combination with `instanceof`, this enables a clean way to handle different subclasses.

Can you create a record with private fields?
In a record, the fields are implicitly `private final` and are accessed through the automatically generated getter methods. You cannot make the fields explicitly private or change their access modifiers.

Can a sealed class have abstract methods?
Yes, a sealed class can have abstract methods, and subclasses that are declared in the `permits` clause must implement those abstract methods.

What happens if you do not define a `permits` clause in a sealed class?
If you do not define a `permits` clause in a sealed class, it means that no subclass is allowed, making the class implicitly final.

How can you modify a record's data?
Since records are immutable by default, you cannot modify their fields directly. However, you can create a new instance of the record with modified values.

Can a sealed class have a constructor?
Yes, a sealed class can have a constructor. However, subclasses defined in the `permits` clause can use the constructor to initialize their own state.

Can you inherit from a record?
No, a record cannot be subclassed, as it is implicitly `final`. This ensures the immutability and integrity of the data it holds.

Are there any restrictions on using records with generics?
There are no restrictions on using records with generics. Records can be used with generics just like regular classes.