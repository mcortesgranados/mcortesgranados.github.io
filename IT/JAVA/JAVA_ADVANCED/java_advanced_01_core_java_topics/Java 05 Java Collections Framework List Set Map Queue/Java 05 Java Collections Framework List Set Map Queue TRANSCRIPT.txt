What is the Java Collections Framework?
The Java Collections Framework (JCF) is a set of interfaces and classes in `java.util` that provide data structures and algorithms for storing, managing, and manipulating collections of objects efficiently.

What are the main interfaces in the Java Collections Framework?
The main interfaces in the JCF are:

`Collection` (superinterface of all collections)
`List` (ordered collection with duplicates)
`Set` (unordered collection without duplicates)
`Map` (key-value pair collection)
`Queue` (FIFO structure for processing elements)
`Deque` (double-ended queue allowing operations on both ends)

What is the difference between `List`, `Set`, and `Map`?


`List`: Ordered collection that allows duplicate elements.
`Set`: Unordered collection that does not allow duplicate elements.
`Map`: Collection that stores key-value pairs, where keys are unique.
What are some common implementations of `List` in Java?
Common `List` implementations include:

`ArrayList` - Dynamic array implementation
`LinkedList` - Doubly linked list implementation
`Vector` - Synchronized dynamic array
`Stack` - LIFO stack implementation (extends `Vector`)
What is the difference between `ArrayList` and `LinkedList`?


`ArrayList`: Uses dynamic arrays, provides fast random access (`O(1)`) but slow insertions and deletions (`O(n)`).
`LinkedList`: Uses a doubly linked list, provides fast insertions and deletions (`O(1)`) but slow random access (`O(n)`).
What is the default initial capacity of an `ArrayList`?
The default initial capacity of an `ArrayList` is **10**.

How can you convert an `ArrayList` to an array in Java?
You can use the `toArray()` method. Example:
            
What are some common implementations of `Set`?
Common implementations of `Set` include:

`HashSet` - Uses a hash table for storage (unordered, allows null).
`LinkedHashSet` - Maintains insertion order.
`TreeSet` - Uses a Red-Black Tree and maintains elements in sorted order.
What is the difference between `HashSet` and `TreeSet`?


`HashSet`: Unordered collection, provides constant-time (`O(1)`) operations.
`TreeSet`: Maintains elements in sorted order, provides logarithmic-time (`O(log n)`) operations.

What is the purpose of the `Queue` interface?
The `Queue` interface represents a collection designed for holding elements prior to processing, typically in FIFO (First-In-First-Out) order. Implementations include `PriorityQueue` and `LinkedList`.

What are some common implementations of `Map` in Java?
Common `Map` implementations include:

`HashMap` - Unordered key-value store, allows `null` keys.
`LinkedHashMap` - Maintains insertion order.
`TreeMap` - Sorted key-value store using a Red-Black Tree.
`Hashtable` - Synchronized key-value store (legacy).

What is the difference between `HashMap` and `TreeMap`?


`HashMap`: Unordered, provides constant-time (`O(1)`) operations.
`TreeMap`: Maintains keys in sorted order, provides logarithmic-time (`O(log n)`) operations.

How do you iterate over a `HashMap` in Java?
You can use a `for-each` loop with `entrySet()`:

What is the difference between `Queue` and `Deque`?


`Queue`: A FIFO (First-In-First-Out) collection.
`Deque`: A double-ended queue that allows elements to be added/removed from both ends.
What is a `PriorityQueue`?
A `PriorityQueue` is a queue where elements are ordered based on their priority rather than insertion order.

How do you sort an `ArrayList` in Java?
You can use `Collections.sort()`:

What is `LinkedHashSet` and how is it different from `HashSet`?
`LinkedHashSet` maintains the insertion order of elements, while `HashSet` does not.

What is the difference between `poll()` and `remove()` in a `Queue`?
`poll()` returns `null` if the queue is empty, whereas `remove()` throws an exception.

How do you synchronize a `HashMap`?
You can use `Collections.synchronizedMap()`:

What is the difference between `Hashtable` and `ConcurrentHashMap`?


`Hashtable`: Synchronizes all operations, leading to performance issues.
`ConcurrentHashMap`: Uses segment-based locking for better concurrency.

What is the difference between `ArrayList` and `LinkedList`?


`ArrayList`: Uses a dynamic array, provides fast random access (`O(1)`), slow insertions/deletions (`O(n)`).
`LinkedList`: Uses a doubly linked list, slow random access (`O(n)`), fast insertions/deletions (`O(1)` at head/tail).
How does `HashSet` prevent duplicate elements?
`HashSet` uses a `HashMap` internally and relies on the `hashCode()` and `equals()` methods to ensure uniqueness.

What is the default initial capacity of an `ArrayList`?
The default initial capacity of an `ArrayList` is 10.

How do you convert a `List` to an `Array` in Java?
You can use `toArray()`:

What is the difference between `remove(int index)` and `remove(Object obj)` in an `ArrayList`?


`remove(int index)`: Removes the element at the specified index.
`remove(Object obj)`: Removes the first occurrence of the specified object.
How do you remove duplicate elements from an `ArrayList`?
Convert the `ArrayList` to a `Set`:
            
What is the difference between `peek()`, `poll()`, and `remove()` in a `Queue`?


`peek()`: Retrieves but does not remove the head element; returns `null` if empty.
`poll()`: Retrieves and removes the head element; returns `null` if empty.
`remove()`: Retrieves and removes the head element; throws an exception if empty.

How do you create a thread-safe `ArrayList`?
You can use `Collections.synchronizedList()`:
            
How does `TreeSet` maintain order?
`TreeSet` maintains elements in a sorted order using a Red-Black Tree.

How do you find the frequency of elements in a `List`?
Use `Collections.frequency()`:

What is the difference between `HashMap` and `TreeMap`?


`HashMap`: Unordered, allows `null` keys, provides `O(1)` time complexity for operations.
`TreeMap`: Maintains keys in sorted order, does not allow `null` keys, provides `O(log n)` complexity.

How do you iterate over a `Map` in Java?
You can iterate using `entrySet()`:

What is a `PriorityQueue`, and how does it work?
`PriorityQueue` is a queue where elements are ordered based on priority using a heap structure.

How do you convert a `Map` to a `List`?
Convert using `ArrayList`:

What is the difference between `Deque` and `Queue`?


`Queue`: Follows FIFO (First-In-First-Out).
`Deque`: Supports both FIFO and LIFO operations.
How do you reverse a `List` in Java?
Use `Collections.reverse()`:

How does `ConcurrentHashMap` handle concurrency?
It divides the map into segments and allows concurrent reads and updates.

How do you synchronize a `HashSet`?
Use `Collections.synchronizedSet()`:

What is the difference between `poll()` and `remove()` in a `Queue`?
`poll()` returns `null` if empty, while `remove()` throws an exception.

How do you create an immutable `List` in Java?
Use `Collections.unmodifiableList()`:

What is the difference between `LinkedList` and `ArrayList`?


`ArrayList`: Uses a dynamic array, faster random access (`O(1)`).
`LinkedList`: Uses a doubly linked list, better for frequent insertions/removals (`O(1)` for adding/removing at the ends).
How do you sort a `List` in Java?
Use `Collections.sort()`:

What is a `WeakHashMap`?
A `WeakHashMap` holds keys using weak references, allowing them to be garbage collected if no strong references exist.

What is the difference between `peek()` and `poll()` in `Queue`?
`peek()` retrieves the head of the queue without removing it, while `poll()` retrieves and removes it.

How do you create a thread-safe `ArrayList`?
Use `Collections.synchronizedList()`:

How do you check if two `HashSet` objects are equal?
Use the `equals()` method:

What is the default size of a `HashMap`?
The default capacity is 16, with a load factor of 0.75.

How do you remove duplicates from a `List`?
Convert it to a `Set`:

What is the difference between `TreeSet` and `HashSet`?


`TreeSet`: Maintains elements in sorted order, `O(log n)` complexity.
`HashSet`: No ordering, `O(1)` complexity for basic operations.
How do you get the first and last elements of a `TreeSet`?
Use `first()` and `last()`:

What is the difference between `ArrayDeque` and `LinkedList`?


`ArrayDeque` is a resizable array-based implementation of a double-ended queue (deque), faster for queue operations.
`LinkedList` is a doubly linked list, useful for frequent insertions/removals at arbitrary positions.
How do you synchronize a `HashMap`?
Use `Collections.synchronizedMap()`:

What is the difference between `LinkedHashMap` and `HashMap`?


`LinkedHashMap` maintains insertion order.
`HashMap` does not guarantee order.

What is a `PriorityQueue` in Java?
A `PriorityQueue` is a queue that orders elements based on priority using a comparator or natural ordering.

How do you iterate over a `HashMap`?
Use `entrySet()`:

What is the default sorting order of a `TreeMap`?
`TreeMap` sorts elements in ascending order by key.

How do you reverse a `List`?
Use `Collections.reverse()`:

How do you get the highest and lowest keys in a `TreeMap`?
Use `firstKey()` and `lastKey()`:

What is the difference between `Deque` and `Queue`?


`Queue` follows FIFO (First-In-First-Out).
`Deque` allows insertion and removal from both ends.
How do you create an unmodifiable `List`?
Use `Collections.unmodifiableList()`:

What is the difference between `peek()` and `poll()` in a Queue?


`peek()` retrieves the head of the queue without removing it.
`poll()` retrieves and removes the head of the queue.

What is a `WeakHashMap` in Java?
A `WeakHashMap` stores keys as weak references, meaning keys can be garbage collected if no strong references exist.

What is the difference between `retainAll()` and `removeAll()` in a `List`?


`retainAll()` keeps only the elements that are present in the given collection.
`removeAll()` removes all elements that are present in the given collection.
How do you remove duplicate elements from a `List`?
Convert the `List` to a `Set`:
            
What is the difference between `TreeSet` and `HashSet`?


`TreeSet` maintains elements in sorted order.
`HashSet` does not guarantee order.
How do you find the frequency of elements in a `List`?
Use `Collections.frequency()`:

How do you convert a `Map` to a `List`?
Convert `keySet()` or `values()` to a `List`:
            
What is the difference between `headSet()`, `tailSet()`, and `subSet()` in a `TreeSet`?

`headSet(element)`: Returns elements less than `element`.
`tailSet(element)`: Returns elements greater than or equal to `element`.
`subSet(start, end)`: Returns elements between `start` (inclusive) and `end` (exclusive).
How do you make a `List` thread-safe?
Use `Collections.synchronizedList()`:

How do you shuffle a `List` randomly?
Use `Collections.shuffle()`:

What is the difference between `ArrayDeque` and `LinkedList` as a queue?


`ArrayDeque` is faster and does not allow null elements.
`LinkedList` allows null elements and has higher memory usage due to node references.
What is the difference between `LinkedHashSet` and `HashSet`?


`LinkedHashSet` maintains insertion order.
`HashSet` does not guarantee order.

How do you reverse a `List`?
Use `Collections.reverse()`:
            
How do you check if two `Lists` are equal?
Use `list1.equals(list2)`, which checks for element-wise equality.

How do you create an immutable `List`?
Use `Collections.unmodifiableList()`:
            
What is the difference between `ArrayList` and `Vector`?


`ArrayList` is not synchronized, making it faster.
`Vector` is synchronized, making it thread-safe but slower.
What is `PriorityQueue` and how does it work?
A `PriorityQueue` orders elements according to natural ordering or a custom comparator.

How do you sort a `Map` by value?
Convert it into a `List` of entries and sort using a comparator.
            
How do you remove an element from a `Map` while iterating?
Use `Iterator.remove()`:

            
What is the difference between `poll()`, `remove()`, and `peek()` in a Queue?


`poll()`: Retrieves and removes the head, returning `null` if empty.
`remove()`: Retrieves and removes the head, throwing an exception if empty.
`peek()`: Retrieves the head without removing it, returning `null` if empty.
 
How do you create a `TreeMap` with a custom comparator?
Use a `Comparator` while constructing the `TreeMap`.

What is the difference between `Deque` and `Queue`?

`Queue` follows FIFO (First-In-First-Out).
`Deque` (Double-ended Queue) allows insertion and removal from both ends.

How do you find the maximum value in a `List `?
Use `Collections.max()`:
            
How do you convert a `List` to a `Set`?
Use `new HashSet<>(list)` to remove duplicates.
            
How do you merge two `Maps`?
Use `putAll()` or `merge()`:

            
What is the difference between `peek()`, `element()`, and `poll()` in `Queue`?


`peek()`: Retrieves but does not remove, returns `null` if empty.
`element()`: Retrieves but does not remove, throws an exception if empty.
`poll()`: Retrieves and removes, returns `null` if empty.

How do you iterate over a `Map`?
Use `forEach()` or an `Iterator`:

How do you shuffle a `List`?
Use `Collections.shuffle()`:

How do you make a `Map` thread-safe?
Use `Collections.synchronizedMap()`:
            
How do you remove duplicates from a `List`?
Convert to a `Set`:

What is the difference between `LinkedList` and `ArrayList`?


`ArrayList` is backed by a dynamic array, making random access fast (O(1)), but insertions and deletions slow (O(n)).
`LinkedList` is backed by a doubly-linked list, making insertions and deletions fast (O(1)), but random access slow (O(n)).

How do you sort a `List ` in reverse order?
Use `Collections.sort()` with `Collections.reverseOrder()`:

What is the difference between `HashMap` and `TreeMap`?


`HashMap` is unordered and provides O(1) time complexity for get/put operations.
`TreeMap` is sorted in natural order or by a custom comparator and provides O(log n) complexity.
How do you create an immutable `List`?
Use `Collections.unmodifiableList()` or `List.of()`:

What is `PriorityQueue` and how does it work?
`PriorityQueue` is a queue where elements are ordered based on priority, using natural ordering or a comparator.

What is the difference between `peek()`, `poll()`, and `remove()` in `Queue`?


`peek()`: Retrieves but does not remove, returns `null` if empty.
`poll()`: Retrieves and removes, returns `null` if empty.
`remove()`: Retrieves and removes, throws an exception if empty.

How do you create a synchronized `List`?
Use `Collections.synchronizedList()`:

How do you remove all elements from a `List` that match a condition?
Use `removeIf()`:

How do you find duplicates in a `List`?
Use a `Set` to track seen elements:

What is the difference between `Comparable` and `Comparator`?


`Comparable` is implemented by a class to define a natural ordering (`compareTo`).
`Comparator` is an external comparison strategy used to define custom ordering (`compare`).
 