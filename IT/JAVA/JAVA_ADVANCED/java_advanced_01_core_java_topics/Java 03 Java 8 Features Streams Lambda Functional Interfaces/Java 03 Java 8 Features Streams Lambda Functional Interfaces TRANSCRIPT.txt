What is a lambda expression in Java?
A lambda expression is a way to provide clear and concise syntax for writing anonymous methods (implementations of functional interfaces). It allows you to express instances of single-method interfaces (functional interfaces) in a much simpler way. The general syntax is: (parameters) -> expression.

What is the purpose of the `Optional` class in Java?
The `Optional` class is used to represent a value that may or may not be present. It helps to avoid `NullPointerException` by providing methods to handle the absence of a value in a functional way, using methods like `ifPresent()`, `orElse()`, and `map()`.

What is a functional interface in Java?
A functional interface in Java is an interface that contains exactly one abstract method. Functional interfaces can have multiple default or static methods. They are used primarily to represent lambda expressions or method references. The `@FunctionalInterface` annotation is used to indicate a functional interface.

How can you use a lambda expression to filter a list of integers in Java?
You can use a lambda expression with Java Streams to filter a list of integers.

What are the benefits of using Java Streams?
Java Streams provide a high-level abstraction for working with sequences of data. Benefits include:
Concise code using operations like map, filter, reduce, etc.
Support for parallel processing, making it easier to work with large datasets efficiently.
Functional programming style, improving readability and maintainability of code.

What is the difference between `map()` and `flatMap()` in Java Streams?

The `map()` method transforms each element in the stream to another object.
The `flatMap()` method is used when you want to transform each element into multiple elements (i.e., a stream of streams) and then flatten the result into a single stream.

What is the purpose of the `filter()` method in Java Streams?
The `filter()` method in Java Streams is used to exclude elements from a stream based on a given predicate (a condition). It returns a new stream that contains only the elements that satisfy the condition.

How can you create a stream from a collection in Java?
You can create a stream from a collection using the `stream()` method.

What is the `forEach()` method in Java Streams?
The `forEach()` method is used to iterate over all the elements in a stream and perform an action on each element. It is a terminal operation and is often used for side-effect operations, such as printing elements.


What is the `reduce()` method in Java Streams?
The `reduce()` method in Java Streams is a terminal operation that takes a binary operator and returns a single value by combining all the elements of the stream. It is often used for aggregation operations such as sum, max, or concatenation.

What is the purpose of the `Optional.orElse()` method?
The `orElse()` method in the `Optional` class is used to return the value contained within the `Optional` if present, or a default value if it is empty. This helps avoid `NullPointerException` by providing a fallback value.

What is the `map()` function in the context of `Optional` in Java?
The `map()` function in `Optional` is used to transform the value inside the `Optional` if it is present. If the `Optional` is empty, `map()` returns an empty `Optional` instead of applying the transformation.

What is method reference in Java?
A method reference is a shorthand notation of a lambda expression that calls a method. It uses the `::` operator to refer to a method by its name.

How do you create a stream from an array in Java?
You can create a stream from an array using the `Arrays.stream()` method.

What is the difference between `Optional.get()` and `Optional.orElse()`?
The `get()` method retrieves the value contained in the `Optional` if it is present, but throws a `NoSuchElementException` if the `Optional` is empty. The `orElse()` method provides a fallback value if the `Optional` is empty, making it safer to use in most cases.

How do you use a `Consumer` functional interface in Java?
The `Consumer` interface represents an operation that accepts a single input argument and returns no result. It is often used with the `forEach()` method in streams to perform actions on each element.

What is the use of `Collectors.toList()` in Java Streams?
The `Collectors.toList()` is a collector used in Java Streams to accumulate the elements of the stream into a new `List`. It is commonly used in conjunction with the `collect()` method to gather the results of a stream operation into a collection.

What is the `Supplier` functional interface in Java?
The `Supplier` functional interface represents a function that takes no arguments and returns a result. It is often used when you need to generate values, such as creating a new object.

How does `Stream.sorted()` work in Java?
The `sorted()` method in Java Streams is used to sort the elements of a stream. It returns a stream consisting of the elements of the original stream, sorted according to their natural order or by a provided comparator.

What does the `Optional.ifPresent()` method do?
The `ifPresent()` method in `Optional` is used to execute a given action if the value is present. It takes a `Consumer` as an argument and applies it if the `Optional` contains a value, otherwise it does nothing.

What is the difference between `Optional.isPresent()` and `Optional.ifPresent()`?
The `isPresent()` method returns a boolean indicating whether the value is present inside the `Optional`. The `ifPresent()` method, on the other hand, accepts a `Consumer` and performs an action if the value is present.

How do you use `Optional.map()` in Java?
The `map()` method is used to transform the value inside the `Optional` if it is present. If the value is not present, it returns an empty `Optional`. It takes a `Function` as an argument.

What is the `Predicate` functional interface in Java?
The `Predicate` interface represents a function that takes an argument and returns a boolean value. It is often used for filtering or matching elements based on a condition.

How do you create a parallel stream in Java?
You can create a parallel stream by calling the `parallelStream()` method on a collection. A parallel stream can perform operations concurrently, improving performance for large datasets.

What is the `BiFunction` interface in Java?
The `BiFunction` interface is a functional interface that represents a function that accepts two arguments and returns a result. It is commonly used when you need to combine two values to produce a result.

How do you use the `flatMap()` method with Optional?
The `flatMap()` method in `Optional` is used to transform the value inside the `Optional` to another `Optional`. It is used when the transformation itself may return an empty `Optional`, and you want to avoid nested Optionals.

What is the `Function` functional interface in Java?
The `Function` interface represents a function that takes one argument and produces a result. It is commonly used for transformations and operations on elements.

What is the use of `Collectors.joining()` in Java Streams?
The `Collectors.joining()` method is a collector used to concatenate the elements of a stream into a single string. You can also specify delimiters, prefixes, and suffixes.

What is the `Optional.orElseGet()` method in Java?
The `orElseGet()` method is used to provide a fallback value for an empty `Optional`. Unlike `orElse()`, which takes a fixed value, `orElseGet()` takes a `Supplier` that is only invoked if the `Optional` is empty.

How do you chain multiple `Optional` methods?
You can chain multiple `Optional` methods like `map()`, `flatMap()`, or `filter()` to perform transformations or checks sequentially. 

What is the `Comparator.comparing()` method in Java?
The `Comparator.comparing()` method is a static method in the `Comparator` interface used to create a comparator based on a key extracted from the objects being compared. It is often used for sorting.

How does the `Stream.forEach()` method work?
The `forEach()` method in a stream is a terminal operation that iterates over each element of the stream and applies a specified action (e.g., printing or modifying the element). It is commonly used for side effects.

What is the `Stream.anyMatch()` method in Java?
The `anyMatch()` method in a stream returns `true` if any element of the stream satisfies the given predicate. It is a short-circuiting operation, meaning it stops as soon as it finds a matching element.

What is the `Stream.allMatch()` method in Java?
The `allMatch()` method in a stream returns `true` if all elements in the stream satisfy the given predicate. It is a short-circuiting operation that stops as soon as a non-matching element is found.

What is the difference between `map()` and `flatMap()` in Java Streams?
The `map()` method applies a function to each element of the stream and returns a new stream with transformed elements. The `flatMap()` method, on the other hand, applies a function that returns a stream itself and flattens the results into a single stream. It is used when the transformation function produces a stream of values.

What is the `Optional.filter()` method in Java?
The `filter()` method in `Optional` is used to check if the value inside the `Optional` satisfies a given predicate. If the value is present and matches the predicate, it is returned wrapped in the `Optional`; otherwise, an empty `Optional` is returned.

How do you use `Optional.empty()` in Java?
The `Optional.empty()` method creates an empty `Optional` instance. It is often used to represent the absence of a value without using `null`. 

What does `Stream.collect()` do in Java?
The `collect()` method is a terminal operation that transforms the elements of a stream into a different form, such as a collection (e.g., `List`, `Set`, `Map`). It takes a `Collector` as an argument.

What is the `Stream.reduce()` method used for in Java?
The `reduce()` method is a terminal operation that performs a reduction on the elements of a stream using an associative accumulation function and returns an `Optional` containing the reduced value. For example, summing the elements of a stream:

What is the `Optional.orElse()` method in Java?
The `orElse()` method provides a fallback value when the `Optional` is empty. It returns the value inside the `Optional` if present, otherwise it returns the specified default value. For 

What is the `Function.andThen()` method in Java?
The `andThen()` method is used to chain two functions. It first applies the current function, then applies the second function to the result of the first. For 

What does the `Stream.peek()` method do?
The `peek()` method allows you to perform an action on each element of the stream without consuming the stream. It is often used for debugging or logging intermediate results. However, it is not recommended for production code due to its side effects.

How do you use `Optional.flatMap()` in Java?
The `flatMap()` method is used to transform the value inside the `Optional` into another `Optional`. It is useful when the transformation may result in an empty `Optional`, and you want to avoid nested `Optional` instances. For 

What is the `Stream.sorted()` method used for?
The `sorted()` method in a stream is used to sort the elements of the stream. It can be used with the natural ordering or a custom comparator. For 

How can you use `Stream.map()` with custom objects?
The `map()` method can be used with custom objects by providing a function that transforms each object to another value. For example, to extract the `name` property from a list of objects:

What is the purpose of the `Stream.distinct()` method?
The `distinct()` method is used to eliminate duplicate elements in a stream. It returns a stream containing only the distinct elements based on their `equals()` method. For 

What is a functional interface in Java?
A functional interface is an interface that has exactly one abstract method. It can have multiple default or static methods, but only one abstract method. These interfaces are used primarily as the basis for lambda expressions and method references. Examples include `Runnable`, `Callable`, `Comparator`, and `Predicate`.

What is the `Optional.map()` method in Java?
The `map()` method in `Optional` is used to apply a function to the value inside the `Optional` if present, and return a new `Optional` containing the transformed value. If the `Optional` is empty, it returns an empty `Optional`. For 

What is a `Predicate` functional interface in Java?
The `Predicate` functional interface represents a boolean-valued function that takes one argument. It is used primarily in filter operations. 

How do you create a lambda expression that accepts two parameters?
You can create a lambda expression with two parameters by using the following syntax:

What is the `Stream.flatMap()` method in Java?
The `flatMap()` method is used to flatten a stream of streams into a single stream. It is often used when the transformation function returns a stream and you want to merge them into one. 

What does the `Optional.isPresent()` method do?
The `isPresent()` method returns `true` if the `Optional` contains a non-null value, and `false` if it is empty. 

How does the `Optional.ifPresent()` method work?
The `ifPresent()` method in `Optional` is used to perform an action on the value inside the `Optional` if it is present. If the `Optional` is empty, the action is not performed. 

How can you use `Stream.filter()` in Java?
The `filter()` method is used to select elements from a stream based on a given predicate. It returns a new stream with only those elements that satisfy the predicate. 

What is the purpose of `Stream.limit()` in Java?
The `limit()` method is used to truncate a stream to a specified size, returning a new stream that contains the first `n` elements. 

What is the `Function.identity()` method in Java?
The `Function.identity()` method returns a function that always returns its input argument. It is commonly used in operations like `Collectors.toMap()`. 

How do you use `Stream.concat()` in Java?
The `concat()` method is used to concatenate two streams into one. It returns a new stream containing the elements from both streams. 

What is the difference between `Stream.map()` and `Stream.flatMap()` in Java?
The `map()` method is used to transform each element of the stream into a new form, whereas `flatMap()` is used when each element of the stream can be mapped to another stream, and those streams are merged into a single stream. For 

What is the use of `Supplier` functional interface in Java?
The `Supplier` functional interface represents a supplier of results. It does not take any input and returns a result. It is typically used in scenarios where you need to generate or supply data, like in `Stream.generate()`. 

What is the `Stream.collect()` method in Java?
The `collect()` method is a terminal operation that transforms the elements of a stream into a different form, usually a collection like a `List`, `Set`, or `Map`. It takes a `Collector` as an argument. 

How can you create a stream from an array in Java?
You can create a stream from an array using the `Arrays.stream()` method or the `Stream.of()` method. 

What is the `Optional.orElseGet()` method in Java?
The `orElseGet()` method provides a fallback value using a supplier when the `Optional` is empty. It is different from `orElse()` because `orElseGet()` takes a supplier and only computes the value if the `Optional` is empty. 

What is the purpose of `Stream.peek()` method in Java?
The `peek()` method is an intermediate operation used to inspect or perform actions on each element of the stream without modifying it. It is often used for debugging or logging purposes. 

What is the `Optional.ifPresentOrElse()` method in Java?
The `ifPresentOrElse()` method allows you to perform an action if the value is present, or provide a fallback action if the value is empty. It is useful for performing two actions based on the presence of a value. 

How does the `Stream.allMatch()` method work?
The `allMatch()` method is a terminal operation that checks whether all elements of the stream satisfy the given predicate. It returns `true` if all elements match, otherwise `false`. 

What is the `Stream.forEachOrdered()` method in Java?
The `forEachOrdered()` method is used to ensure that elements are processed in the order they appear in the stream, especially when using parallel streams. 

What is a functional interface in Java?
A functional interface in Java is an interface that has exactly one abstract method. It may have multiple default or static methods. Functional interfaces are used as the basis for lambda expressions. 

What is the `Optional.orElse()` method in Java?
The `orElse()` method returns the value if present; otherwise, it returns the default value passed as an argument. 

How do you create a `Stream` from a `List` in Java?
You can create a `Stream` from a `List` using the `stream()` method. 

What does the `Optional.isPresent()` method do?
The `isPresent()` method checks if a value is present in the `Optional` object. It returns `true` if the value is present, otherwise `false`. 

What is the `Stream.distinct()` method used for in Java?
The `distinct()` method is an intermediate operation that filters out duplicate elements from a stream. It ensures that only unique elements are present in the resulting stream. 

What is the purpose of `Stream.filter()` method?
The `filter()` method is an intermediate operation that allows you to filter elements from a stream based on a condition provided by a predicate. 

How can you create an immutable `List` using Java 8?
You can create an immutable list using `List.of()` in Java 8. 

What is the `Stream.reduce()` method in Java?
The `reduce()` method is a terminal operation that performs a reduction on the elements of the stream using an associative accumulation function and returns an `Optional`. 

What is the `Function` functional interface in Java?
The `Function` interface represents a function that takes one argument and returns a result. It is commonly used in `Stream.map()` for transformations. 

What is the `Optional.get()` method in Java?
The `get()` method is used to retrieve the value contained in the `Optional` object. It throws `NoSuchElementException` if the value is not present. 

What is the `Stream.forEach()` method in Java?
The `forEach()` method is a terminal operation that performs the given action for each element of the stream. 

What does `Optional.ifPresent()` do in Java?
The `ifPresent()` method performs the given action if a value is present, otherwise does nothing. 

What is the purpose of `Stream.collect()` method in Java?
The `collect()` method is a terminal operation that transforms the elements of a stream into a different form, usually a collection like a list or a map. 

What is the `Optional.orElseThrow()` method in Java?
The `orElseThrow()` method returns the value if present, otherwise throws an exception provided by the caller. 

How do you use `Stream.map()` to transform a stream?
The `map()` method is an intermediate operation that transforms each element of the stream using a given function. 

What is the `Stream.flatMap()` method used for in Java?
The `flatMap()` method is an intermediate operation that flattens a stream of streams into a single stream. 

How does the `Stream.peek()` method work in Java?
The `peek()` method is an intermediate operation that allows you to perform an action on each element of the stream without modifying the stream itself. It is mainly used for debugging. 

What is the difference between `map()` and `flatMap()` in Java?
The `map()` method is used to transform each element of the stream into another form, whereas `flatMap()` is used to flatten a stream of collections into a single stream. 

What does `Stream.anyMatch()` do in Java?
The `anyMatch()` method is a short-circuiting terminal operation that checks if any element of the stream satisfies the given predicate. It returns `true` if any element matches, otherwise `false`. 

What is the `Optional.map()` method in Java?
The `map()` method in `Optional` allows you to transform the value contained inside the `Optional` if it is present, and returns a new `Optional`. 

What is the purpose of `Stream.reduce()` in Java?
The `reduce()` method is a terminal operation that performs a reduction on the elements of the stream using an associative accumulation function and returns an `Optional` value. 

How does the `Optional.orElse()` method work in Java?
The `orElse()` method returns the value contained in the `Optional` if it is present, otherwise it returns the provided default value. 

What is a `Supplier` functional interface in Java?
A `Supplier` is a functional interface that represents a function that supplies a value of a certain type without taking any arguments. 

How do you use `Optional.filter()` in Java?
The `filter()` method allows you to apply a predicate to an `Optional`. If the value is present and satisfies the predicate, the `Optional` is returned, otherwise, an empty `Optional` is returned. 

What is a `Function` functional interface in Java?
A `Function` is a functional interface that represents a function that accepts one argument and produces a result. 

What is the difference between `map()` and `flatMap()` when used with `Optional`?
When using `Optional`, `map()` transforms the value inside the `Optional` if present, whereas `flatMap()` can be used if the transformation function itself returns an `Optional`. 

What is a `Predicate` functional interface in Java?
A `Predicate` is a functional interface that represents a function that takes one argument and returns a boolean value, typically used for testing conditions. 

How does `Stream.allMatch()` work in Java?
The `allMatch()` method is a short-circuiting terminal operation that checks if all elements of the stream satisfy the given predicate. It returns `true` if all elements match, otherwise `false`. 

What is the `Stream.distinct()` method used for in Java?
The `distinct()` method is an intermediate operation that removes duplicate elements from the stream. 

What is `Stream.count()` used for in Java?
The `count()` method is a terminal operation that returns the number of elements in the stream. 