What is Object-Oriented Programming (OOP)?
OOP is a programming paradigm based on the concept of objects, which contain data in the form of fields (often known as attributes or properties) and code in the form of procedures (often known as methods).

What are the four main principles of OOP?
The four main principles of OOP are Encapsulation, Abstraction, Inheritance, and Polymorphism.

What is Encapsulation in OOP?
Encapsulation is the concept of wrapping data (variables) and methods (functions) into a single unit called a class, and restricting access to certain details using access modifiers (private, public, protected).

What is Abstraction in OOP?
Abstraction is the concept of hiding the implementation details and showing only the essential features of an object. It helps in reducing complexity by providing a clear interface.

What is Inheritance in OOP?
Inheritance is the mechanism in OOP that allows one class to acquire the properties and behaviors (methods) of another class. This helps in code reusability and hierarchical class structure.

What is Polymorphism in OOP?
Polymorphism allows objects of different classes to be treated as objects of a common superclass. It also allows the method of the same name to behave differently based on the object that invokes it.

What is the difference between an abstract class and an interface in Java?
An abstract class can have both abstract methods (without implementation) and concrete methods (with implementation). An interface can only have abstract methods (until Java 8, after which default and static methods are allowed). A class can extend only one abstract class but can implement multiple interfaces.

What is the use of the 'super' keyword in Java?
The `super` keyword in Java is used to refer to the immediate parent class object. It can be used to call a parent class constructor, method, or field.

What is method overloading in Java?
Method overloading occurs when multiple methods have the same name but differ in the number or type of parameters. It is a way to create more than one method with the same name that performs similar but slightly different tasks.

What is method overriding in Java?
Method overriding occurs when a subclass provides a specific implementation for a method that is already defined in its superclass. The method in the subclass must have the same signature as the one in the superclass.

What is the purpose of the 'this' keyword in Java?
The `this` keyword refers to the current object of the class. It is commonly used to differentiate between class fields and parameters with the same name, and to invoke the current object's methods.

What is the significance of access modifiers in OOP?
Access modifiers in OOP define the visibility and accessibility of class members (fields and methods). The main access modifiers in Java are `public`, `private`, `protected`, and default (package-private), each offering different levels of access control.

What is the difference between '=='' and 'equals()' in Java?
The `==` operator compares the reference (memory address) of two objects, while the `equals()` method compares the actual content of the objects. `equals()` must be overridden in a class to provide meaningful comparison.

What is the difference between 'final', 'finally', and 'finalize' in Java?
- `final` is used to declare constants, prevent method overriding, or prevent inheritance. - `finally` is used to define a block of code that will always be executed, regardless of whether an exception was thrown. - `finalize` is a method that is called by the garbage collector before an object is removed from memory.

What is the concept of "composition" in OOP?
Composition is a design principle in OOP where one object contains references to other objects, which may be used as part of its functionality. It represents a "has-a" relationship.

What is the concept of "aggregation" in OOP?
Aggregation is a special form of association where one object is associated with another but both can exist independently. It represents a "whole-part" relationship but without strong ownership.

What is the concept of "association" in OOP?
Association is a general term used to describe a relationship between two or more objects, which may be one-to-one, one-to-many, or many-to-many. Unlike composition or aggregation, association does not imply ownership.

What is the concept of "inheritance" in OOP?
Inheritance is a fundamental concept in OOP that allows a class (child or subclass) to inherit fields and methods from another class (parent or superclass). This promotes code reuse and establishes a hierarchical relationship between classes.

What is the difference between "overriding" and "overloading" in OOP?
- **Overriding** is when a subclass provides its own implementation of a method that is already defined in its superclass. The method signature remains the same. - **Overloading** is when multiple methods with the same name are defined in the same class, but they differ in parameters (number or type).

What is the concept of "polymorphism" in OOP?
Polymorphism allows objects to be treated as instances of their parent class while invoking methods that are specific to their actual class. It enables one interface to be used for a general class of actions.

What is the difference between "abstract class" and "interface" in Java?
- An **abstract class** can have both abstract (without implementation) and concrete (with implementation) methods, and it can have fields with default values. - An **interface** can only contain abstract methods (until Java 8, after which default and static methods are allowed), and all fields are implicitly `public`, `static`, and `final`.

What is the concept of "encapsulation" in OOP?
Encapsulation is the concept of hiding the internal implementation details of a class and only exposing the necessary parts of it, typically through public methods. This is done by marking the fields as private and providing getter and setter methods for accessing them.

What is the difference between "public", "private", "protected", and "default" access modifiers in Java?
- **public**: The member is accessible from any other class. - **private**: The member is accessible only within the same class. - **protected**: The member is accessible within the same package and by subclasses (even if they are in different packages). - **default** (no modifier): The member is accessible only within the same package.

Can you explain the term "composition" in OOP?
Composition is a design principle in OOP where one class contains an instance of another class to represent a "has-a" relationship. It is a more flexible alternative to inheritance, as objects can be composed dynamically.


What is the difference between "composition" and "inheritance" in OOP?
- **Inheritance** represents an "is-a" relationship where a subclass inherits properties and behaviors from a superclass. - **Composition** represents a "has-a" relationship where a class contains an object of another class to provide functionality.

What is "aggregation" in OOP?
Aggregation is a special form of association where one object is part of another object, but the contained objects can exist independently of the container. It represents a "whole-part" relationship.

What is "association" in OOP?
Association in OOP refers to a relationship between two or more objects where they can interact with each other, but they do not own or control each other. It can be one-to-one, one-to-many, or many-to-many.

Can you explain the concept of "dependency injection" in OOP?
Dependency Injection (DI) is a design pattern used to implement Inversion of Control (IoC), where an object's dependencies are provided externally rather than being created within the object itself. This promotes loose coupling and better testability.

What is the difference between "abstract class" and "interface" in Java?
- An **abstract class** can have both abstract (without implementation) and concrete (with implementation) methods. It allows the use of constructors and fields. - An **interface** only contains abstract methods (until Java 8, when default and static methods were introduced). A class can implement multiple interfaces but can extend only one abstract class.

What is the purpose of an interface in Java?
An interface defines a contract that any implementing class must follow. It allows for abstraction and multiple inheritance in Java. A class can implement multiple interfaces, providing flexibility in design.

What is the concept of "method overloading" in Java?
Method overloading is the concept of defining multiple methods in the same class with the same name but different parameter lists (different number, types, or both). The appropriate method is called based on the number or type of arguments passed.

What is the concept of "method overriding" in Java?
Method overriding occurs when a subclass provides its own implementation of a method that is already defined in its superclass. The method signature in the subclass must match the one in the superclass.

What is the purpose of the "super" keyword in Java?
The `super` keyword is used to refer to the immediate parent class of the current object. It is commonly used to call the superclass constructor or to access superclass methods and fields that are overridden or hidden by the subclass.

What is "polymorphism" in OOP?
Polymorphism is the ability of a class to take many forms. It allows methods to behave differently based on the object that is calling them. This can be achieved through method overriding (runtime polymorphism) and method overloading (compile-time polymorphism).

What is "encapsulation" in OOP?
Encapsulation is the bundling of data (variables) and the methods that operate on that data into a single unit, called a class. It helps restrict access to certain components of the object and is achieved using access modifiers like `private`, `protected`, and `public`.

What is the difference between "composition" and "inheritance" in OOP?
- **Composition** refers to building complex objects by combining simpler objects. It is a "has-a" relationship, where one object contains references to other objects. - **Inheritance** represents an "is-a" relationship, where a subclass inherits the behavior and properties of its superclass, allowing for code reuse and extension.

What is the concept of "constructor" in Java?
A constructor is a special method that is called when an object is instantiated. It is used to initialize the object's fields. Constructors have the same name as the class and do not have a return type.

What is the concept of "constructor overloading" in Java?
Constructor overloading is the ability to define multiple constructors in the same class with different parameter lists. Each constructor performs different initialization tasks depending on the arguments passed.

What is the difference between "static" and "instance" variables in Java?
- A **static variable** is shared among all instances of a class. It belongs to the class itself rather than to any specific object. - An **instance variable** is specific to each instance of a class. Each object has its own copy of instance variables.

What is "polymorphism" in OOP?
Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables the same method or operation to behave differently depending on the type of object it is called on.

What is the concept of "method overloading" in Java?
Method overloading refers to defining multiple methods with the same name but different parameter lists. It allows different behaviors based on the number or type of parameters passed.

What is the difference between "abstract class" and "interface" in Java?
- An **abstract class** can have both abstract (unimplemented) and concrete (implemented) methods. It can have member variables and constructors. - An **interface** can only have abstract methods (until Java 8 introduced default and static methods). A class that implements an interface must provide implementations for all its methods.

What is the concept of "constructor chaining" in Java?
Constructor chaining is the process of calling one constructor from another constructor in the same class or from a superclass constructor. It can be done using the `this` or `super` keyword.

What is the concept of "super" in Java?
The `super` keyword is used to refer to the immediate superclass of a class. It is used to call the superclass constructor or access its methods and fields.

What is the concept of "inheritance" in OOP?
Inheritance is a mechanism in OOP where one class inherits properties and behaviors (methods) from another class. This allows for code reuse and can model hierarchical relationships between classes.

What is the difference between "overriding" and "overloading" in Java?
- **Method Overloading** is when multiple methods have the same name but differ in the number or type of parameters. - **Method Overriding** occurs when a subclass provides its own implementation of a method already defined in its superclass.

What is "encapsulation" in OOP?
Encapsulation is the practice of hiding the internal details of an object and only exposing necessary parts of it. This is typically achieved by defining private fields and providing public getter and setter methods to access and modify them.

What is the purpose of the `this` keyword in Java?
The `this` keyword is used to refer to the current instance of a class. It is commonly used to access instance variables and methods, and to distinguish between instance variables and local variables when they have the same name.

What is the difference between "static" and "non-static" methods in Java?
- **Static methods** belong to the class rather than to any specific instance of the class. They can be called without creating an object of the class. - **Non-static methods** belong to an instance of the class and can only be called on an object of that class.

What is "polymorphism" in OOP?
Polymorphism allows objects of different classes to be treated as objects of a common superclass. It enables a single method to work on different types of objects, allowing for flexibility in code.

What is an "abstract class" in Java?
An abstract class is a class that cannot be instantiated on its own and is meant to be extended by other classes. It may contain abstract methods (methods without a body) that must be implemented by subclasses.

What is an "interface" in Java?
An interface is a reference type in Java that can contain only constants, method signatures, default methods, and static methods. It cannot contain instance fields or constructors. A class implements an interface by providing concrete implementations of the methods defined in the interface.

What is the significance of the `super` keyword in Java?
The `super` keyword refers to the superclass of the current object. It is used to access superclass methods, constructors, and fields from a subclass.

What is "composition" in OOP?
Composition is a design principle where one class is composed of one or more objects of other classes. It represents a "has-a" relationship and is considered a more flexible alternative to inheritance.

What is the difference between composition and inheritance in OOP?
- **Inheritance** represents an "is-a" relationship, where a subclass inherits the behavior of its superclass. - **Composition** represents a "has-a" relationship, where a class contains objects of other classes.


