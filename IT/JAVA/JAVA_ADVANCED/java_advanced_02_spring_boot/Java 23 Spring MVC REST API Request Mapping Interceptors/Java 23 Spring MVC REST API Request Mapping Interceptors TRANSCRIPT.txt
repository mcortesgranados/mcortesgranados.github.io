1. What is the purpose of the @RequestMapping annotation in Spring MVC?
The @RequestMapping annotation is used to map HTTP requests to handler methods of MVC and REST controllers in Spring. It can be applied to methods and classes to specify the request path, request method, and other parameters that the method should handle. It simplifies the mapping of different HTTP request types (GET, POST, etc.) to specific methods in a controller.

2. What is the difference between @GetMapping, @PostMapping, @PutMapping, and @DeleteMapping annotations in Spring MVC?
These annotations are shortcuts for @RequestMapping with specific HTTP request methods:

@GetMapping: Handles HTTP GET requests, typically used to retrieve resources.
@PostMapping: Handles HTTP POST requests, typically used to create new resources.
@PutMapping: Handles HTTP PUT requests, typically used to update an existing resource.
@DeleteMapping: Handles HTTP DELETE requests, typically used to delete a resource.

3. What is the role of the @PathVariable annotation in Spring MVC?
The @PathVariable annotation is used to bind a method parameter to a URI template variable. It is commonly used in REST APIs when the request URI contains dynamic values (e.g., a resource identifier) that need to be passed to the method as parameters.

4. How does @RequestParam differ from @PathVariable in Spring MVC?
@RequestParam is used to bind query parameters from the URL, while @PathVariable is used to bind URI template variables. @RequestParam is used in cases where the parameter is part of the query string or form data, while @PathVariable is used when the parameter is embedded in the URL path itself.

5. What is the purpose of an Interceptor in Spring MVC?
An Interceptor in Spring MVC is used to pre-process and post-process requests. It can be used to perform actions such as logging, authentication, authorization, modifying request/response objects, or handling exceptions before and after the controller's method is executed. Interceptors are similar to filters but have more flexibility.

6. How do you configure interceptors in Spring MVC?
Interceptors are configured using the WebMvcConfigurer interface. By implementing the addInterceptors() method, you can add interceptors to the application. You also specify the URL patterns for which the interceptors should be applied. Example configuration in a Java config class:

7. What is the difference between HandlerInterceptor and HandlerInterceptorAdapter?
HandlerInterceptor is the interface that defines the methods for intercepting requests and responses. HandlerInterceptorAdapter is an abstract class that implements HandlerInterceptor with default empty methods. It provides an easier way to implement interceptors by overriding only the necessary methods, instead of implementing the entire interface.

8. How can you intercept a request before it reaches the controller in Spring MVC?
To intercept a request before it reaches the controller, you can implement the preHandle() method in a custom interceptor. This method is executed before the controller's handler method is called and can be used for tasks such as authentication or modifying the request.

9. What is the significance of the preHandle() method in an interceptor?
The preHandle() method in an interceptor is executed before the request is processed by the handler method in the controller. It returns a boolean value indicating whether the request should continue processing or be interrupted (e.g., for authentication failure). If it returns true, the request proceeds; if false, the request is stopped, and the response is sent immediately.

10. What is the purpose of postHandle() in an interceptor?
The postHandle() method in an interceptor is executed after the controller's handler method has been invoked but before the view is rendered. It can be used to modify the ModelAndView object, for example, adding attributes or altering the view name before the response is sent back to the client.

 1. How do you return a response body in a Spring MVC REST API method?
You can return a response body in a Spring MVC REST API method by annotating the method with @ResponseBody. This tells Spring to convert the return value into the appropriate HTTP response body, typically in JSON or XML format depending on the client's request. Example:

        
2. What is the purpose of @RestController annotation in Spring MVC?
The @RestController annotation is a convenience annotation that combines @Controller and @ResponseBody. It is used for RESTful APIs and ensures that the return values from the methods are automatically serialized into HTTP response bodies without needing to manually annotate each method with @ResponseBody.

3. Can you use both @RequestMapping and specific HTTP method annotations like @GetMapping?
Yes, you can use both. @RequestMapping is a general-purpose annotation that can handle all HTTP methods (GET, POST, PUT, DELETE, etc.). However, specific annotations like @GetMapping, @PostMapping, etc., are more concise and are preferred for readability and clarity. They are essentially shorthand for @RequestMapping with the corresponding HTTP method.

4. How can you pass parameters in the request URL in Spring MVC?
Parameters can be passed in the request URL as either query parameters (using @RequestParam) or path variables (using @PathVariable). Example with @RequestParam:

5. How would you map a request to a method using multiple path variables?
You can map a request with multiple path variables by specifying multiple parameters in the @GetMapping (or @RequestMapping) path and using @PathVariable for each parameter. Example:

6. What is the function of @ExceptionHandler in Spring MVC?
The @ExceptionHandler annotation is used to define a method for handling exceptions thrown by handler methods in a controller. It allows you to handle specific exceptions and provide a custom response for error scenarios.

7. How can you globally configure exception handling in Spring MVC?
Global exception handling in Spring MVC can be configured using @ControllerAdvice. This allows you to define a centralized handler for exceptions across multiple controllers. Example:

8. What is the role of @RequestBody annotation in Spring MVC?
The @RequestBody annotation is used to bind the HTTP request body to a method parameter. This is useful for receiving JSON, XML, or other data formats in the request body and converting them to Java objects. Example:

9. How can you add custom headers to a response in Spring MVC?
You can add custom headers to a response by using the ResponseEntity class. Example:

10. How do you implement cross-origin resource sharing (CORS) in Spring MVC?
CORS can be configured in Spring MVC using the @CrossOrigin annotation or by setting global CORS mappings using Java config. Example of using @CrossOrigin:

1. How do you use Spring MVC interceptors for logging requests?
You can use interceptors to log requests in Spring MVC by implementing the HandlerInterceptor interface. The preHandle method is used to log the incoming request before the controller is called. Example:

2. How do you register a custom interceptor in Spring MVC?
Custom interceptors can be registered in Spring MVC by adding them to the InterceptorRegistry within a configuration class that implements WebMvcConfigurer. Example:

3. How can you restrict access to a controller method based on the HTTP method type (GET, POST)?
You can restrict access to a controller method based on the HTTP method by using specific annotations such as @GetMapping, @PostMapping, @PutMapping, etc. These annotations ensure that the method is only invoked for the corresponding HTTP request method. Example:

4. What is the difference between @ResponseBody and @RequestBody in Spring MVC?
@ResponseBody is used to convert the return value of a method into the response body (e.g., JSON, XML). @RequestBody, on the other hand, is used to bind the HTTP request body to a method parameter. Example:

5. How can you handle form data in Spring MVC REST API?
Form data can be handled in Spring MVC using the @RequestParam annotation. It is used to extract values from the request parameters. Example:

6. How would you handle pagination in Spring MVC REST API?
Pagination can be implemented in Spring MVC REST API by using the Pageable interface from Spring Data. Example:

7. How can you handle JSON parsing errors in Spring MVC?
You can handle JSON parsing errors by using the @ExceptionHandler annotation to handle specific exceptions like HttpMessageNotReadableException. Example:

8. How do you configure a Spring MVC REST API to accept only JSON data?
You can configure Spring MVC REST API to accept only JSON data by specifying the consumes attribute in the @RequestMapping annotations. Example:

9. How do you implement a custom HTTP status code in Spring MVC REST API?
A custom HTTP status code can be returned by using the ResponseEntity class, which allows you to specify both the response body and HTTP status. Example:

10. What is the use of @RequestMapping annotation in Spring MVC?
The @RequestMapping annotation is used to map web requests to specific handler methods in a controller. It can be used with different HTTP methods (GET, POST, PUT, DELETE) and can also specify parameters, headers, and more. Example:

1. How do you enable Cross-Origin Resource Sharing (CORS) in Spring MVC?
CORS can be enabled globally by adding a CORS mapping in the WebMvcConfigurer interface, or it can be configured at the method level using the @CrossOrigin annotation. Example of global configuration:

2. How do you handle the 404 error in Spring MVC?
A 404 error can be handled by defining a custom error handler using the @ExceptionHandler annotation for ResourceNotFoundException. Example:

3. How do you create a custom annotation for request mapping in Spring MVC?
You can create a custom annotation and use it with @RequestMapping as part of a combination of custom logic. Example:

4. How can you customize the response body in Spring MVC?
You can customize the response body in Spring MVC by using the @ResponseBody annotation or ResponseEntity class. Example using ResponseEntity:

5. How do you handle request parameters in Spring MVC?
You can handle request parameters using the @RequestParam annotation. Example:

6. How can you restrict method mappings to specific HTTP methods in Spring MVC?
You can restrict method mappings by using the HTTP method specific annotations like @GetMapping, @PostMapping, etc. Example:

7. How do you use path variables in Spring MVC?
Path variables can be used with @PathVariable to capture values from the URI. Example:

8. What is the use of @RequestHeader in Spring MVC?
The @RequestHeader annotation is used to extract header values from an HTTP request. Example:

9. How do you prevent CSRF attacks in Spring MVC?
CSRF (Cross-Site Request Forgery) protection can be enabled by default in Spring Security. It can be disabled or configured if needed. Example of disabling CSRF protection:

10. How can you validate user input in Spring MVC?
Input validation in Spring MVC can be done using JSR-303 annotations like @NotNull, @Size, and @Email on your entity or DTO classes. Example:

1. How do you handle multipart file uploads in Spring MVC?
Multipart file uploads can be handled using the @RequestParam annotation. Example:

2. What is the purpose of the @RequestBody annotation in Spring MVC?
The @RequestBody annotation is used to bind the HTTP request body to a method parameter, typically for JSON or XML payloads. Example:

3. How can you customize the HTTP status code in a Spring MVC response?
You can customize the HTTP status code by using ResponseEntity to return the desired status. Example:

4. How do you set request mapping for multiple endpoints in Spring MVC?
You can set multiple mappings for a single method using @RequestMapping with the value parameter, or use more specific annotations like @GetMapping and @PostMapping. Example:

5. What is an interceptor in Spring MVC and how is it used?
An interceptor in Spring MVC is a mechanism to preprocess or postprocess HTTP requests. You can implement an HandlerInterceptor interface and register it in the configuration. Example:

6. How can you configure global interceptors in Spring MVC?
Global interceptors can be configured by implementing WebMvcConfigurer and overriding the addInterceptors method. Example:

7. How do you handle exception handling in Spring MVC?
Exception handling can be done globally using @ControllerAdvice or locally with @ExceptionHandler. Example using @ControllerAdvice:

8. How can you use query parameters in Spring MVC?
Query parameters can be accessed using @RequestParam. Example:

9. How do you make Spring MVC REST API methods return JSON?
By default, Spring MVC automatically converts the return values to JSON when using @RestController. Example:

10. How do you secure a Spring MVC REST API endpoint?
You can secure REST API endpoints by using Spring Security. Example of securing an endpoint:

1. How can you bind path variables in Spring MVC?
Path variables can be bound using the @PathVariable annotation. Example:

2. How do you configure Spring MVC to support cross-origin resource sharing (CORS)?
CORS can be configured at the method, controller, or global level using @CrossOrigin or a WebMvcConfigurer implementation. Example:

3. What is the difference between @RequestParam and @PathVariable in Spring MVC?
@RequestParam is used for query parameters, while @PathVariable is used to extract values from the URL path. Example:

4. How can you add custom headers to a Spring MVC response?
You can add custom headers using the HttpServletResponse object in your controller method. Example:

5. How do you use the @ResponseBody annotation in Spring MVC?
The @ResponseBody annotation tells Spring MVC to write the return value directly to the HTTP response body as JSON or XML. Example:

6. How do you handle form data submission in Spring MVC?
You can handle form data using @ModelAttribute to bind form fields to an object. Example:

7. How can you implement pagination in Spring MVC REST API?
Pagination can be implemented using Pageable and Page from Spring Data. Example:

8. How can you secure your Spring MVC API endpoints using JWT?
Spring Security can be configured to validate JWT tokens in request headers for secure access. Example:

9. How do you add custom exception handling in Spring MVC?
Custom exception handling can be done using @ExceptionHandler or @ControllerAdvice. Example:

10. How do you handle HTTP requests with custom HTTP methods in Spring MVC?
You can use @RequestMapping to map custom HTTP methods (e.g., PUT, DELETE, PATCH). Example:

1. How can you configure an interceptor in Spring MVC?
You can configure an interceptor by implementing HandlerInterceptor and registering it in WebMvcConfigurer. Example:

2. What is the purpose of the @RequestMapping annotation in Spring MVC?
The @RequestMapping annotation is used to map HTTP requests to handler methods of MVC controllers. It can handle multiple HTTP methods like GET, POST, PUT, DELETE, etc. Example:

3. How can you handle multiple HTTP request methods for a single method in Spring MVC?
You can use @RequestMapping with method parameter to specify multiple HTTP methods. Example:

4. How can you handle request parameters in Spring MVC?
Request parameters can be handled using @RequestParam. Example:

5. What is the purpose of the @RequestBody annotation in Spring MVC?
The @RequestBody annotation is used to bind the body of the HTTP request to a method parameter in the controller. Example:

6. How can you use custom interceptors to modify requests and responses?
Custom interceptors can be implemented by creating a class that implements HandlerInterceptor. Example:

7. What is the role of HandlerInterceptor in Spring MVC?
HandlerInterceptor allows for pre-processing, post-processing, and completion handling of HTTP requests and responses. It can be used for tasks like logging, authentication, or modifying the response. Example:

8. How can you configure exception handling globally in Spring MVC?
Global exception handling can be done using @ControllerAdvice along with @ExceptionHandler. Example:

9. How do you perform content negotiation in Spring MVC?
Content negotiation is handled using @RequestMapping with produces or consumes parameters to specify the desired media type (JSON, XML). Example:

10. How do you add custom headers to a Spring MVC response?
You can add custom headers by using HttpServletResponse or returning a ResponseEntity. Example:

1. What is the function of @PathVariable in Spring MVC?
The @PathVariable annotation is used to extract values from the URI of the request. Example:

2. How can you limit the number of results in Spring MVC REST API?
You can limit the number of results by using query parameters, for example, using @RequestParam for pagination. Example:

3. What is the difference between @RequestMapping and @GetMapping?
@RequestMapping is a general-purpose mapping annotation that can handle various HTTP methods (GET, POST, PUT, DELETE). @GetMapping is a specialized version of @RequestMapping for handling HTTP GET requests. Example:

4. How can you handle different HTTP methods for the same method in Spring MVC?
You can use @RequestMapping with the method attribute to specify which HTTP methods the handler should accept. Example:

5. How can you intercept and log the request URL and method in Spring MVC?
You can use a custom HandlerInterceptor to log the request details. Example:

6. How can you configure a Spring MVC handler method to consume JSON or XML?
You can specify the consumes attribute of @RequestMapping to define which media type the handler method will consume. Example:

7. How do you configure an interceptor to handle HTTP requests and responses in Spring MVC?
You configure an interceptor by implementing HandlerInterceptor and registering it via WebMvcConfigurer. Example:

8. What is the role of @ControllerAdvice in Spring MVC?
@ControllerAdvice is used to define global exception handling, model attribute population, and data binding for all controllers in the application. Example:

9. How can you return custom error messages in Spring MVC?
You can return custom error messages by using @ExceptionHandler within @ControllerAdvice or within individual controllers. Example:

10. How can you bind HTTP request parameters to method arguments in Spring MVC?
You can bind HTTP request parameters to method arguments using @RequestParam. Example:

1. How do you handle multiple HTTP methods in a single method in Spring MVC?
You can handle multiple HTTP methods using @RequestMapping with the method attribute, or use the specific annotations like @GetMapping, @PostMapping, etc. Example:

2. What is the difference between @RequestBody and @RequestParam?
@RequestBody is used to bind the entire HTTP request body to a method parameter, typically for JSON or XML content. @RequestParam is used to bind individual query parameters from the request URL to method parameters. Example:

3. How can you add cross-origin support in Spring MVC?
You can add cross-origin support by using @CrossOrigin on the controller or method level. Example:

4. How do you configure a custom error page for a REST API in Spring MVC?
You can configure a custom error page using @ExceptionHandler in combination with @ControllerAdvice. Example:

5. What is the use of @RequestMapping in Spring MVC?
@RequestMapping is used to map HTTP requests to handler methods of MVC and REST controllers. It can handle different HTTP methods (GET, POST, PUT, DELETE) and accept parameters like value, method, produces, and consumes. Example:

6. How can you specify request parameters in Spring MVC REST API?
You can specify request parameters using @RequestParam to bind query parameters to method arguments. Example:

7. How do you customize Spring MVC response headers?
You can customize response headers using HttpServletResponse or through @ResponseHeader. Example:

8. What is HandlerInterceptor used for in Spring MVC?
HandlerInterceptor is used to intercept HTTP requests before and after the controller execution. It allows for pre-processing (e.g., authentication) and post-processing (e.g., logging). Example:

9. How can you enable session management in Spring MVC?
You can enable session management by using @SessionAttributes or managing HTTP session state directly through HttpSession. Example:

10. How do you bind request parameters to complex objects in Spring MVC?
You can bind request parameters to complex objects using @ModelAttribute for form data or JSON data. Example:

1. What is @ResponseBody annotation in Spring MVC?
The @ResponseBody annotation is used to indicate that the return value of a method should be bound to the web response body. It is commonly used in REST APIs to send JSON or XML data to the client. Example:

2. How do you handle HTTP exceptions in Spring MVC?
You can handle HTTP exceptions using @ExceptionHandler at the controller level, or globally using @ControllerAdvice. Example:

3. How can you configure Spring MVC to use JSON as the response format?
You can configure Spring MVC to use JSON as the default response format by adding Jackson to the project dependencies, and Spring will automatically map Java objects to JSON. Example:
The response will automatically be serialized to JSON.

4. How do you perform authentication with Spring Security in a REST API?
You can perform authentication in a REST API using JWT (JSON Web Token) or session-based authentication. JWT tokens are commonly used in RESTful APIs for stateless authentication. Example:

5. How can you handle CORS (Cross-Origin Resource Sharing) in Spring MVC?
You can handle CORS by using @CrossOrigin at the method or controller level, or by configuring it globally in Spring Security or WebMvcConfigurer. Example:

6. What is the purpose of @RequestMapping in a Spring MVC controller?
The @RequestMapping annotation is used to map web requests to specific handler methods in a controller. It can handle HTTP methods, request parameters, headers, and content types. Example:

7. How can you define default values for request parameters in Spring MVC?
You can define default values for request parameters using the defaultValue attribute in @RequestParam. Example:

8. How do you map a specific HTTP status code to a controller method?
You can use @ResponseStatus on a method or exception class to specify the HTTP status code to return. Example:

9. What is the use of @ModelAttribute in Spring MVC?
@ModelAttribute is used to bind request parameters to method arguments or populate a model attribute in the controller. It is often used for form handling. Example:

10. How do you add an interceptor in Spring MVC?
You can add an interceptor by implementing the HandlerInterceptor interface and registering it in the WebMvcConfigurer. Example: